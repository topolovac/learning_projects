
package components

import (
	"fmt"
	"github.com/google/uuid"
	"github.com/topolovac/learning_projects/rate_my_lick/services"
	"strconv"
	"time"
)

func getColor(index int, isTopLicksList bool) string {
	if !isTopLicksList {
		return ""
	}
	switch index {
	case 0:
		return "gold"
	case 1:
		return "silver"
	case 2:
		return "bronce"
	default:
		return ""
	}
}

templ Licks(samples []services.Sample, userId uuid.UUID, isTopLicksList bool) {
	for index, sample := range samples {
		<div class={ "lick-container", getColor(index, isTopLicksList) }>
			<h4>{ strconv.Itoa(index + 1) }. { sample.Name }</h4>
			<small>Published: { sample.Created.Format(time.RFC1123) }</small>
			<audio controls>
				<source src={ fmt.Sprintf("/static/licks/%s", sample.Filename) }/>
				Your browser does not support the audio element.
			</audio>
			<small>{ sample.Description }</small>
			@RatingSection(sample, userId)
		</div>
	}
}

templ RatingSection(sample services.Sample, userId uuid.UUID) {
	<div class="rating-container">
		<div>
			@RatingButton(5, sample.Id.String(), userAlreadyVoted(sample.Ratings[5], userId)) {
				‚≠ê
			}
			<span class="tooltiptext">Maestro</span>
			@RatingLabel(len(sample.Ratings[5]))
		</div>
		<div>
			@RatingButton(4, sample.Id.String(), userAlreadyVoted(sample.Ratings[4], userId)) {
				üî•
			}
			<span class="tooltiptext">Excellent</span>
			@RatingLabel(len(sample.Ratings[4]))
		</div>
		<div>
			@RatingButton(3, sample.Id.String(), userAlreadyVoted(sample.Ratings[3], userId)) {
				üé∏
			}
			<span class="tooltiptext">Very good!</span>
			@RatingLabel(len(sample.Ratings[3]))
		</div>
		<div>
			@RatingButton(2, sample.Id.String(), userAlreadyVoted(sample.Ratings[2], userId)) {
				üòÄ
			}
			<span class="tooltiptext">Good</span>
			@RatingLabel(len(sample.Ratings[2]))
		</div>
		<div>
			@RatingButton(1, sample.Id.String(), userAlreadyVoted(sample.Ratings[1], userId)) {
				üòï 
			}
			<span class="tooltiptext">Needs Practice</span>
			@RatingLabel(len(sample.Ratings[1]))
		</div>
	</div>
}

templ RatingLabel(rating int) {
	if rating > 0 {
		<small>{ strconv.Itoa(rating) }</small>
	} else {
		<small></small>
	}
}

templ RatingButton(rating int, id string, disabledButton bool) {
	<button
		hx-post={ fmt.Sprintf("/lick/%s/rate/%d", id, rating) }
		hx-target="closest .rating-container"
		hx-swap="outerHTML"
		disabled?={ disabledButton }
	>
		{ children... }
	</button>
}
